diff --git a/chrome/browser/ui/toolbar/toolbar_model_impl.cc b/chrome/browser/ui/toolbar/toolbar_model_impl.cc
index 6f2c542..b6dec55 100644
--- a/chrome/browser/ui/toolbar/toolbar_model_impl.cc
+++ b/chrome/browser/ui/toolbar/toolbar_model_impl.cc
@@ -68,7 +68,8 @@ base::string16 ToolbarModelImpl::GetFormattedURL(size_t* prefix_end) const {
   // the space.
   return AutocompleteInput::FormattedStringWithEquivalentMeaning(
       url, url_formatter::FormatUrl(
-               url, languages, url_formatter::kFormatUrlOmitAll,
+               url, languages, (url_formatter::kFormatUrlOmitAll &
+                                ~url_formatter::kFormatUrlOmitHTTP),
                net::UnescapeRule::NORMAL, nullptr, prefix_end, nullptr),
       ChromeAutocompleteSchemeClassifier(profile));
 }
diff --git a/components/omnibox/browser/autocomplete_input.cc b/components/omnibox/browser/autocomplete_input.cc
index d5e10f5..fc590a1 100644
--- a/components/omnibox/browser/autocomplete_input.cc
+++ b/components/omnibox/browser/autocomplete_input.cc
@@ -288,6 +288,18 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   if (!canonicalized_url->has_host())
     return metrics::OmniboxInputType::QUERY;
 
+  if (!parts->scheme.is_nonempty() &&
+      base::LowerCaseEqualsASCII(parsed_scheme_utf8, url::kHttpScheme)) {
+    // Scheme was not specified. url_fixer::FixupURL automatically adds http:,
+    // but we want to default to https instead.
+    if (scheme)
+      *scheme = base::ASCIIToUTF16(url::kHttpsScheme);
+    url::Replacements<char> replacements;
+    replacements.SetScheme(url::kHttpsScheme,
+                           url::Component(0, strlen(url::kHttpsScheme)));
+    *canonicalized_url = canonicalized_url->ReplaceComponents(replacements);
+  }
+
   // Determine the host family.  We get this information by (re-)canonicalizing
   // the already-canonicalized host rather than using the user's original input,
   // in case fixup affected the result here (e.g. an input that looks like an
